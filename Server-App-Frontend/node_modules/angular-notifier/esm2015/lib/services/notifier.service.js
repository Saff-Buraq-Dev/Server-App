import { Inject, Injectable } from '@angular/core';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierConfigToken } from '../notifier.tokens';
import { NotifierQueueService } from './notifier-queue.service';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './notifier-queue.service';
import * as ɵngcc2 from '../models/notifier-config.model';
export class NotifierService {
    /**
     * Constructor
     *
     * @param notifierQueueService Notifier queue service
     * @param config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @returns Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * Get the observable for handling actions
     *
     * @returns Observable of NotifierAction
     */
    get actionStream() {
        return this.queueService.actionStream.asObservable();
    }
    /**
     * API: Show a new notification
     *
     * @param notificationOptions Notification options
     */
    show(notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW',
        });
    }
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param notificationId ID of the notification to hide
     */
    hide(notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE',
        });
    }
    /**
     * API: Hide the newest notification
     */
    hideNewest() {
        this.queueService.push({
            type: 'HIDE_NEWEST',
        });
    }
    /**
     * API: Hide the oldest notification
     */
    hideOldest() {
        this.queueService.push({
            type: 'HIDE_OLDEST',
        });
    }
    /**
     * API: Hide all notifications at once
     */
    hideAll() {
        this.queueService.push({
            type: 'HIDE_ALL',
        });
    }
    /**
     * API: Shortcut for showing a new notification
     *
     * @param type             Type of the notification
     * @param message          Message of the notification
     * @param [notificationId] Unique ID for the notification (optional)
     */
    notify(type, message, notificationId) {
        const notificationOptions = {
            message,
            type,
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    }
}
NotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(ɵngcc1.NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };
NotifierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: NotifierService.ɵfac });
NotifierService.ctorParameters = () => [
    { type: NotifierQueueService },
    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NotifierQueueService }, { type: ɵngcc2.NotifierConfig, decorators: [{
                type: Inject,
                args: [NotifierConfigToken]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1ub3RpZmllci9zcmMvbGliL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7QUFFSCxNQUFNLE9BQU8sZUFBZTtBQUM1QixJQVVFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURHO0FBQ0wsSUFBRSxZQUFtQixvQkFBMEMsRUFBK0IsTUFBc0I7QUFDcEgsUUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO0FBQzdDLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLFNBQVM7QUFBSyxRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLElBQVcsWUFBWTtBQUFLLFFBQzFCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLElBQUksQ0FBQyxtQkFBZ0Q7QUFBSSxRQUM5RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLE9BQU8sRUFBRSxtQkFBbUI7QUFDbEMsWUFBTSxJQUFJLEVBQUUsTUFBTTtBQUNsQixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBUyxJQUFJLENBQUMsY0FBc0I7QUFBSSxRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLE9BQU8sRUFBRSxjQUFjO0FBQzdCLFlBQU0sSUFBSSxFQUFFLE1BQU07QUFDbEIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBUyxVQUFVO0FBQUssUUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDM0IsWUFBTSxJQUFJLEVBQUUsYUFBYTtBQUN6QixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFTLFVBQVU7QUFBSyxRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLElBQUksRUFBRSxhQUFhO0FBQ3pCLFNBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVMsT0FBTztBQUFLLFFBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQzNCLFlBQU0sSUFBSSxFQUFFLFVBQVU7QUFDdEIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFTLE1BQU0sQ0FBQyxJQUFZLEVBQUUsT0FBZSxFQUFFLGNBQXVCO0FBQUksUUFDdEUsTUFBTSxtQkFBbUIsR0FBZ0M7QUFDN0QsWUFBTSxPQUFPO0FBQ2IsWUFBTSxJQUFJO0FBQ1YsU0FBSyxDQUFDO0FBQ04sUUFBSSxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7QUFDdEMsWUFBTSxtQkFBbUIsQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDO0FBQzlDLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSDsyQ0E3R0MsVUFBVTs2R0FDVDtBQUFDO0FBRUksWUFaRSxvQkFBb0I7QUFBSSxZQUh4QixjQUFjLHVCQThCMkMsTUFBTSxTQUFDLG1CQUFtQjtBQUFROzs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOb3RpZmllckFjdGlvbiB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1hY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWdUb2tlbiB9IGZyb20gJy4uL25vdGlmaWVyLnRva2Vucyc7XG5pbXBvcnQgeyBOb3RpZmllclF1ZXVlU2VydmljZSB9IGZyb20gJy4vbm90aWZpZXItcXVldWUuc2VydmljZSc7XG5cbi8qKlxuICogTm90aWZpZXIgc2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHB1YmxpYyBub3RpZmllciBBUEkuIE9uY2UgaW5qZWN0ZWQgaW50byBhIGNvbXBvbmVudCwgZGlyZWN0aXZlLCBwaXBlLCBzZXJ2aWNlLCBvciBhbnkgb3RoZXIgYnVpbGRpbmdcbiAqIGJsb2NrIG9mIGFuIGFwcGxpY2F0aW9ucywgaXQgY2FuIGJlIHVzZWQgdG8gc2hvdyBuZXcgbm90aWZpY2F0aW9ucywgYW5kIGhpZGUgZXhpc3Rpbmcgb25lcy4gSW50ZXJuYWxseSwgaXQgdHJhbnNmb3JtcyBBUEkgY2FsbHMgaW50b1xuICogYWN0aW9ucywgd2hpY2ggdGhlbiBnZXQgdGhyb3duIGludG8gdGhlIGFjdGlvbiBxdWV1ZSAtIGV2ZW50dWFsbHkgYmVpbmcgcHJvY2Vzc2VkIGF0IHRoZSByaWdodCBtb21lbnQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclNlcnZpY2Uge1xuICAvKipcbiAgICogTm90aWZpZXIgcXVldWUgc2VydmljZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBxdWV1ZVNlcnZpY2U6IE5vdGlmaWVyUXVldWVTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogTm90aWZpZXJDb25maWc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmllclF1ZXVlU2VydmljZSBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG4gICAqIEBwYXJhbSBjb25maWcgICAgICAgICAgICAgICBOb3RpZmllciBjb25maWd1cmF0aW9uLCBvcHRpb25hbGx5IGluamVjdGVkIGFzIGEgZGVwZW5kZW5jeVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG5vdGlmaWVyUXVldWVTZXJ2aWNlOiBOb3RpZmllclF1ZXVlU2VydmljZSwgQEluamVjdChOb3RpZmllckNvbmZpZ1Rva2VuKSBjb25maWc6IE5vdGlmaWVyQ29uZmlnKSB7XG4gICAgdGhpcy5xdWV1ZVNlcnZpY2UgPSBub3RpZmllclF1ZXVlU2VydmljZTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHJldHVybnMgTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIGdldENvbmZpZygpOiBOb3RpZmllckNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb2JzZXJ2YWJsZSBmb3IgaGFuZGxpbmcgYWN0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIG9mIE5vdGlmaWVyQWN0aW9uXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFjdGlvblN0cmVhbSgpOiBPYnNlcnZhYmxlPE5vdGlmaWVyQWN0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMucXVldWVTZXJ2aWNlLmFjdGlvblN0cmVhbS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3cgYSBuZXcgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25PcHRpb25zIE5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgc2hvdyhub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHBheWxvYWQ6IG5vdGlmaWNhdGlvbk9wdGlvbnMsXG4gICAgICB0eXBlOiAnU0hPVycsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uLCBnaXZlbiBpdHMgSURcbiAgICpcbiAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIElEIG9mIHRoZSBub3RpZmljYXRpb24gdG8gaGlkZVxuICAgKi9cbiAgcHVibGljIGhpZGUobm90aWZpY2F0aW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgcGF5bG9hZDogbm90aWZpY2F0aW9uSWQsXG4gICAgICB0eXBlOiAnSElERScsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBuZXdlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU5ld2VzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX05FV0VTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBvbGRlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU9sZGVzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX09MREVTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGFsbCBub3RpZmljYXRpb25zIGF0IG9uY2VcbiAgICovXG4gIHB1YmxpYyBoaWRlQWxsKCk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgdHlwZTogJ0hJREVfQUxMJyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3J0Y3V0IGZvciBzaG93aW5nIGEgbmV3IG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICAgICBUeXBlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIG1lc3NhZ2UgICAgICAgICAgTWVzc2FnZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAqIEBwYXJhbSBbbm90aWZpY2F0aW9uSWRdIFVuaXF1ZSBJRCBmb3IgdGhlIG5vdGlmaWNhdGlvbiAob3B0aW9uYWwpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5KHR5cGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBub3RpZmljYXRpb25JZD86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbk9wdGlvbnM6IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB0eXBlLFxuICAgIH07XG4gICAgaWYgKG5vdGlmaWNhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vdGlmaWNhdGlvbk9wdGlvbnMuaWQgPSBub3RpZmljYXRpb25JZDtcbiAgICB9XG4gICAgdGhpcy5zaG93KG5vdGlmaWNhdGlvbk9wdGlvbnMpO1xuICB9XG59XG4iXX0=